{
  "name": "active-menu",
  "description": "Facilitates the creation of menus in Node applications.",
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/persata/active-menu.git"
  },
  "author": {
    "name": "Ross Kinsman"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "main": "index.js",
  "keywords": [
    "menu",
    "ui",
    "express"
  ],
  "dependencies": {
    "html-sourcery": "0.1.5"
  },
  "readme": "Active Menu\r\n=========\r\n\r\nAbout\r\n---------\r\n\r\nActive Menu is a module for NodeJS that facilitates the creation of menus in Node applications, specifically (but not limited to) Express.\r\n\r\nInspired by the CMenu widget for the PHP framework Yii ([viewable here](http://www.yiiframework.com/doc/api/1.1/CMenu)) as well as the menu markup from Magento's top menu system.\r\n\r\nThe menu, when rendered will apply the proper `active` classes depending on the current route of the application. For example, when the user is on the route `/admin/posts`, the `<a>` tag and all parents of that tag (`<ul>` and `<li>`) will also be given the `active` class. This makes applying CSS for menu items which relate to the current route quite simple.\r\n\r\nExample\r\n------------\r\n\r\nA simple example using Active Menu for a blog's admin panel:\r\n\r\n    // Require Active Menu\r\n    var activeMenu = require('active-menu');\r\n    // Create a New Instance\r\n    var adminMenu = new activeMenu('adminMenu');\r\n    // Set HTML Attributes for the Top <ul> element\r\n    adminMenu.setAttributes({class : 'menu', id : 'admin-menu'});\r\n\r\n    // Home Node\r\n    var homeNode = adminMenu.addMenuNode('Home', '/admin');\r\n    homeNode.setAttributes({class : 'home home-icon', id : 'home-link'});\r\n\r\n    // Posts Node and Children\r\n    var postsNode = adminMenu.addMenuNode('Posts', '/admin/posts');\r\n    postsNode.setAttributes({class : 'posts posts-icon'});\r\n\r\n    var newPostNode = postsNode.addMenuNode('New Post', '/admin/posts/new');\r\n    newPostNode.setAttributes({class : 'new-post new-icon'});\r\n\r\n    // Settings Node\r\n    var settingsNode = adminMenu.addMenuNode('Settings', '/admin/settings');\r\n    settingsNode.setAttributes({class : 'settings cog-icon'});\r\n\r\n    // Use Menu\r\n    app.use(adminMenu.menu);\r\n\r\nWhen `app.use(...)` is called for `adminMenu.menu`, it adds the menu instance to `res.locals` which is then accessible through the Jade templating engine. Simple put `!=adminMenu` in your template and it will render the menu as part of the HTML.\r\n\r\nYou can also get the HTML for the menu by calling `adminMenu.toString()`.\r\n\r\nResult\r\n---------\r\n\r\nThe above example would produce the following output:\r\n\r\n    <ul class=\"menu\" id=\"admin-menu\">\r\n        <li class=\"home home-icon level-0 first\" id=\"home-link\">\r\n            <a href=\"/admin\">Home</a>\r\n        </li>\r\n        <li class=\"posts posts-icon level-0 parent\">\r\n            <a href=\"/admin/posts\">Posts</a>\r\n            <ul class=\"level-1\">\r\n                <li class=\"new-post new-icon level-1 only\">\r\n                    <a href=\"/admin/posts/new\">New Post</a>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n        <li class=\"settings cog-icon level-0 last\">\r\n            <a href=\"/admin/settings\">Settings</a>\r\n        </li>\r\n    </ul>",
  "bugs": {
    "url": "https://github.com/persata/active-menu/issues"
  },
  "_id": "active-menu@0.1.2",
  "dist": {
    "shasum": "2b18b5baa8982937354b211c5a8bbbe50a0c91ef",
    "tarball": "http://registry.npmjs.org/active-menu/-/active-menu-0.1.2.tgz"
  },
  "_from": "active-menu@",
  "_npmVersion": "1.3.2",
  "_npmUser": {
    "name": "persata",
    "email": "persata@gmail.com"
  },
  "maintainers": [
    {
      "name": "persata",
      "email": "persata@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "2b18b5baa8982937354b211c5a8bbbe50a0c91ef",
  "_resolved": "https://registry.npmjs.org/active-menu/-/active-menu-0.1.2.tgz"
}
